name: Build NodeJS Package

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Build
      run: |
        npm install
        npm run compile

    - name: "List contents"
      run: "ls -alh"

    - name: "Upload dist directory"
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist

  release:
    runs-on: ubuntu-latest
    needs: [build]
    steps: 
    - name: "Download dist directory"
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist
        
    - name: Remove junk
      run: |
        rm -rf .git/ .github/ scripts/ src/ node_modules/ tsconfig.json tslint.json

    - name: "List contents"
      run: "ls -alh"
      
    - name: "Determine tag"
      # run: "echo \"RELEASE_TAG=v3.1.0\" >> $GITHUB_ENV"
      run: "echo \"RELEASE_TAG=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d ' ')\" >> $GITHUB_ENV"

    - name: "Create release"
      uses: "actions/github-script@v7"
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"
        script: |
          try {
            const response = await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: true,
              name: process.env.RELEASE_TAG,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: 'v' + process.env.RELEASE_TAG,
              overwrite: true
            });

            core.exportVariable('RELEASE_ID', response.data.id);
            core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
          } catch (error) {
            core.setFailed(error.message);
          }
